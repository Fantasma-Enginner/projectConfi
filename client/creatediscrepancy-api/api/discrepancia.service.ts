/**
 * Discrepancia
 * Corresponde al módulo de discrepancia-Crear Discrepancia
 *
 * OpenAPI spec version: 1.0.0
 * Contact: apiteam@swagger.io
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *//* tslint:disable:no-unused-variable member-ordering */

import { Inject, Injectable, Optional }                      from '@angular/core';
import { HttpClient, HttpHeaders, HttpParams,
         HttpResponse, HttpEvent }                           from '@angular/common/http';
import { CustomHttpUrlEncodingCodec }                        from '../encoder';

import { Observable }                                        from 'rxjs';

import { ApiMessage } from '../model/apiMessage';
import { CodeGeneral } from '../model/codeGeneral';
import { ReconcileDTO } from '../model/reconcileDTO';

import { BASE_PATH, COLLECTION_FORMATS }                     from '../variables';
import { Configuration }                                     from '../configuration';


@Injectable({
  providedIn: 'root'
})
export class DiscrepanciaService {

    protected basePath = 'https://virtserver.swaggerhub.com/Fantasma-Enginner/Crear-discrepancia/1.0.0';
    public defaultHeaders = new HttpHeaders();
    public configuration = new Configuration();

    constructor(protected httpClient: HttpClient, @Optional()@Inject(BASE_PATH) basePath: string, @Optional() configuration: Configuration) {
        if (basePath) {
            this.basePath = basePath;
        }
        if (configuration) {
            this.configuration = configuration;
            this.basePath = basePath || configuration.basePath || this.basePath;
        }
    }

    /**
     * @param consumes string[] mime-types
     * @return true: consumes contains 'multipart/form-data', false: otherwise
     */
    private canConsumeForm(consumes: string[]): boolean {
        const form = 'multipart/form-data';
        for (const consume of consumes) {
            if (form === consume) {
                return true;
            }
        }
        return false;
    }


    /**
     * Crea la discrepancia
     * 
     * @param body Objeto necesario para crear discrepancia
     * @param code Parametro de codigo generel de identificación de un recurso.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public createDiscrepancy(body: ReconcileDTO, code: CodeGeneral, observe?: 'body', reportProgress?: boolean): Observable<any>;
    public createDiscrepancy(body: ReconcileDTO, code: CodeGeneral, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<any>>;
    public createDiscrepancy(body: ReconcileDTO, code: CodeGeneral, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<any>>;
    public createDiscrepancy(body: ReconcileDTO, code: CodeGeneral, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {

        if (body === null || body === undefined) {
            throw new Error('Required parameter body was null or undefined when calling createDiscrepancy.');
        }

        if (code === null || code === undefined) {
            throw new Error('Required parameter code was null or undefined when calling createDiscrepancy.');
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
            'application/json'
        ];
        const httpContentTypeSelected: string | undefined = this.configuration.selectHeaderContentType(consumes);
        if (httpContentTypeSelected != undefined) {
            headers = headers.set('Content-Type', httpContentTypeSelected);
        }

        return this.httpClient.request<any>('put',`${this.basePath}/reconcile/${encodeURIComponent(String(code))}`,
            {
                body: body,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

    /**
     * Consultar transacciones de paso sin discrepancia
     * Consulta pasos sin discrepancia por medio de fecha recaudo, estación , carril y turno o carril, categoría y numero de ticket
     * @param filter Llaves y valores de los criterios de búsqueda.  Enumeración de las posibles llaves:  * &#x60;DATECOLLECTION&#x60; - Fecha de recaudo.  * &#x60;ESTATION&#x60; - Nombre de la estación.  * &#x60;LANEID&#x60; - Id de carril.  * &#x60;TURNCODE&#x60; - Código de turno.  *  O.  * &#x60;LANEID&#x60; - Id de carril.  * &#x60;CATEGORY&#x60; - Categoria del vehículo.  * &#x60;TICKET&#x60; - Número de tiquete. 
     * @param paging Parámetros de paginado. Enumeración de las posibles propiedades:  * &#x60;INDEX&#x60; - Número de página de resultados.  * &#x60;SIZE&#x60; - Tamaño de la página de resultados - Mínimo 5, Máximo 100.
     * @param sorting Parámetros de ordenamiento de resultados. Enumeración de las posibles propiedades:  * &#x60;FIELD&#x60; - Campo de ordenamiento de los resultados de acuerdo a las llaves anteriores.  * &#x60;ORDER&#x60; - Especificación del orden de resultados ASC-DESC.
     * @param observe set whether or not to return the data Observable as the body, response or events. defaults to returning the body.
     * @param reportProgress flag to report request and response progress.
     */
    public findStepsWithoutDiscrepancy(filter?: { [key: string]: string; }, paging?: { [key: string]: number; }, sorting?: { [key: string]: string; }, observe?: 'body', reportProgress?: boolean): Observable<Array<ReconcileDTO>>;
    public findStepsWithoutDiscrepancy(filter?: { [key: string]: string; }, paging?: { [key: string]: number; }, sorting?: { [key: string]: string; }, observe?: 'response', reportProgress?: boolean): Observable<HttpResponse<Array<ReconcileDTO>>>;
    public findStepsWithoutDiscrepancy(filter?: { [key: string]: string; }, paging?: { [key: string]: number; }, sorting?: { [key: string]: string; }, observe?: 'events', reportProgress?: boolean): Observable<HttpEvent<Array<ReconcileDTO>>>;
    public findStepsWithoutDiscrepancy(filter?: { [key: string]: string; }, paging?: { [key: string]: number; }, sorting?: { [key: string]: string; }, observe: any = 'body', reportProgress: boolean = false ): Observable<any> {




        let queryParameters = new HttpParams({encoder: new CustomHttpUrlEncodingCodec()});
        if (filter !== undefined && filter !== null) {
            queryParameters = queryParameters.set('filter', JSON.stringify(filter));
        }
        if (paging !== undefined && paging !== null) {
            queryParameters = queryParameters.set('paging', JSON.stringify(paging));
        }
        if (sorting !== undefined && sorting !== null) {
            queryParameters = queryParameters.set('sorting', JSON.stringify(sorting));
        }

        let headers = this.defaultHeaders;

        // authentication (bearerAuth) required
        if (this.configuration.accessToken) {
            const accessToken = typeof this.configuration.accessToken === 'function'
                ? this.configuration.accessToken()
                : this.configuration.accessToken;
            headers = headers.set('Authorization', 'Bearer ' + accessToken);
        }
        // to determine the Accept header
        let httpHeaderAccepts: string[] = [
            'application/json'
        ];
        const httpHeaderAcceptSelected: string | undefined = this.configuration.selectHeaderAccept(httpHeaderAccepts);
        if (httpHeaderAcceptSelected != undefined) {
            headers = headers.set('Accept', httpHeaderAcceptSelected);
        }

        // to determine the Content-Type header
        const consumes: string[] = [
        ];

        return this.httpClient.request<Array<ReconcileDTO>>('get',`${this.basePath}/reconcile`,
            {
                params: queryParameters,
                withCredentials: this.configuration.withCredentials,
                headers: headers,
                observe: observe,
                reportProgress: reportProgress
            }
        );
    }

}
