/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.27).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package org.tsir.toll.conciliations.reconcile.infrastructure.api;

import org.tsir.toll.conciliations.reconcile.infrastructure.api.ApiMessage;
import org.tsir.toll.conciliations.reconcile.domain.dto.ReconcileDTO;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.validation.Valid;
import javax.validation.constraints.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2021-12-10T16:14:51.559Z[GMT]")
@Validated
public interface ReconcileApi {


    @Operation(summary = "Consultar transacciones de paso sin discrepancia", description = "Consulta pasos sin discrepancia por medio de fecha recaudo, estación , carril y turno o carril, categoría y numero de ticket", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "discrepancia" })
        @ApiResponses(value = { 
            @ApiResponse(responseCode = "200", description = "OK", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = ReconcileDTO.class)))),
            
            @ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
        @RequestMapping(value = "/reconcile",
            produces = { "application/json" }, 
            method = RequestMethod.GET)
        ResponseEntity<List<ReconcileDTO>> findStepsWithoutDiscrepancy(@Parameter(in = ParameterIn.QUERY, description = "Llaves y valores de los criterios de búsqueda.  Enumeración de las posibles llaves:  * `DATECOLLECTION` - Fecha de recaudo.  * `ESTATION` - Nombre de la estación.  * `LANEID` - Id de carril.  * `TURNCODE` - Código de turno.  *  O.  * `LANEID` - Id de carril.  * `CATEGORY` - Categoria del vehículo.  * `TICKET` - Número de tiquete. " ,schema=@Schema()) @Valid @RequestParam(value = "filter", required = false) Map<String, String> filter, @Parameter(in = ParameterIn.QUERY, description = "Parámetros de paginado. Enumeración de las posibles propiedades:  * `INDEX` - Número de página de resultados.  * `SIZE` - Tamaño de la página de resultados - Mínimo 5, Máximo 100." ,schema=@Schema()) @Valid @RequestParam(value = "paging", required = false) Map<String, Integer> paging, @Parameter(in = ParameterIn.QUERY, description = "Parámetros de ordenamiento de resultados. Enumeración de las posibles propiedades:  * `FIELD` - Campo de ordenamiento de los resultados de acuerdo a las llaves anteriores.  * `ORDER` - Especificación del orden de resultados ASC-DESC." ,schema=@Schema()) @Valid @RequestParam(value = "sorting", required = false) Map<String, String> sorting);


    @Operation(summary = "Crea la discrepancia", description = "", security = {
            @SecurityRequirement(name = "bearerAuth")    }, tags={ "discrepancia" })
        @ApiResponses(value = { 
            @ApiResponse(responseCode = "200", description = "Discrepancia registrada correctamente."),
            
            @ApiResponse(responseCode = "200", description = "Contenido con el codigo y mensaje del error. ", content = @Content(mediaType = "application/json", schema = @Schema(implementation = ApiMessage.class))) })
        @RequestMapping(value = "/reconcile/{code}",
            produces = { "application/json" }, 
            consumes = { "application/json" }, 
            method = RequestMethod.PUT)
    ResponseEntity<HashMap<String, String>> createDiscrepancy(@Parameter(in = ParameterIn.PATH, description = "Parametro de codigo generel de identificación de un recurso.", required=true, schema=@Schema()) @PathVariable("code") Long code, @Parameter(in = ParameterIn.DEFAULT, description = "Objeto necesario para crear discrepancia", required=true, schema=@Schema()) @Valid @RequestBody ReconcileDTO body);

}

